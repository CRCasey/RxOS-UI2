(function (fs) {

class onddListener {

	constructor (socketPath) {
		this.socketPath = socketPath;
		this.dataStore = [];
		this.accumulator = "";
		this.firstpiece = true;
		this.ticker = 0;
		this.timeOutInterval = 10;
		this.watchDogCallback = null;
		this.callbackArgs = null;
		this.socket = null;
	}

	// watchdog functions
	
	_tick() {
		this.ticker = this.ticker + 1;
		//console.log("tick:" + this.ticker);
		if (this.ticker > this.timeOutInterval) {
			this.ticker = 0;
			this.watchDogCallback(this.callbackArgs);
		}
	}

	_reset() {
		this.ticker = 0;
	}

	watchDogStart (callback, cb_args) {
		this.timeoutInterval = 10;
		this.watchDogCallback = callback;
		this.callbackArgs = cb_args;
		this.ticker = 0;
		this.watchDogInterval = setInterval(this._tick.bind(this) , 1000);
		//return this._reset();
	}

	// data functions

	_accum(data) {
		var parts = data.split("\n");
		while(parts.length) {
			var p = parts.pop();
			if(p)
				this.accumulator = this.accumulator + p;
			if (parts.length) {
				if (this.firstpiece)
					this.firstpiece = false;
				else {
					try {
						var j = JSON.parse(this.accumulator);
						this.dataStore.push(j);
						console.log(j);
					} catch(err) {
					}
				}
				this.accumulator = "";
			}
		}
	}

	pop() {
		return this.dataStore.pop();
	}


	_onData(d) {
		 this._reset();
                 var ds = d.toString();
                 this._accum(ds);
	}

	_onError(e) {
		//console.log("socket error: " + e);
		this.socket.destroy();
	}

	_restart() {
		this.stop();
		this.start();
	}
	start() {

		//console.log("starting to listen");

		this.watchDogStart ( this._restart.bind(this));

		this.socket = fs.createReadStream(this.socketPath);

		this.socket.on('data', this._onData.bind(this)); 

		this.socket.on('error', this._onError.bind(this));
 
	}
	
	stop() {
		//console.log("stopped listening");
		clearInterval(this.watchDogInterval);
		this.socket.destroy();
	}

}

module.exports.onddListener = onddListener;

})(require('fs'));

