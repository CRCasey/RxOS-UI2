(function (fs, net, xml2js, child_process) {

  var conf_file= '/etc/rxos_config.json';

  var resolve = function(obj, path) {
    return path.split('.').reduce(function(prev, curr) {
      return prev ? prev[curr] : undefined
    }, obj)
  }

  var resolve_set = function(obj, path, value) {
    var parent = path.split('.').slice(0,-1).reduce(function(prev, curr) {
      return prev ? prev[curr] : undefined
    }, obj);
    parent[path.split(".").slice(-1)] = value;
    return obj;
  }

  module.exports.getConf = function (name,cb) {
    fs.readFile(conf_file, function(error, data) {
      if(error)
        cb(null);
      else {
        data_j = JSON.parse(data.toString());
        if (name) {
          var value = resolve(data_j, name);
          cb(value);
        } else {
          cb(data_j)
        }
      }
    });
  };

  module.exports.setConf = function (name,value, cb) {
    module.exports.getConf(null, function (data_j) {
       if(!data_j) {
         data_j = {};
       }
       resolve_set(data_j,name, value);
       fs.writeFile(conf_file, JSON.stringify(data_j, null, '\t'), cb);
    });
  };

  var run_cmd = function (cmd, args, callBack ) {
    var spawn = child_process.spawn;
    var child = spawn(cmd, args);
    var resp = "";

    child.stdout.on('data', function (buffer) { resp += buffer.toString() });
    child.stdout.on('end', function() { callBack (resp) });
  }

  module.exports.runTask = function(args, callback) {
    module.exports.getConf("cmds." + args, function (cmd) {
      run_cmd(cmd.cmd,cmd.args , function(r) {
        callback(r);
      });
    });
  };

  var tuner_conf_read = function(cb) {
    module.exports.getConf("configfiles.tuner",function (fileName) {
      fs.readFile(fileName, function(error, data) {
        if(error)
          cb(null);
        else {
          cb(data.toString());
        }
      });
    });
  };

  var tuner_conf_write = function(settings, cb) {
    tuner_conf_read( function(data) {
      var data_o = {};
      if(data) {
        data_o = JSON.parse(data);
      }
      data_o['ondd_l'] = settings;
      module.exports.getConf("configfiles.tuner",function (fileName) {
        fs.writeFile(fileName, JSON.stringify(data_o, null, '\t'), cb);
      });
    });
  };

  module.exports.getTunerConf = function(callback) {
    module.exports.getConf("tunerConf",function (r) {
        callback(r);
    });
  };

  module.exports.setTunerConf = function(args, callback) {
    module.exports.setConf("tunerConf", args, function(r) {
        tuner_conf_write(args['beams'][args['selectedBeam']]['ondd_l'], function (r) {
            module.exports.runTask("tunerRestart", callback);
            //callback(r);
        });
    });
  };

  module.exports.getOnddStatus = function(callback) {
    module.exports.getConf("ondd",function (onddConf) {
      net.createConnection(onddConf.controlSocket)
      .setEncoding('utf8')
      .on('data', function(resp) {
          var x = new x2js;
          callback(x.xml2js(resp));
      })
      .write(onddConf.statusQuery);
    });
  };

})(require('fs'), require('net'), require('x2js'), require('child_process'));
